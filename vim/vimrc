" Cross-platform .vimrc file
" Tested on Windows and Linux

" After getting this file, bootstrap the vim configuration like this:
"    - run dotfiles\dotfiles_setup
"    - install the fonts at dotfiles\fonts into the OS
"    - start vim and run :BundleInstall
"    - exit vim and restart

set nocompatible               " Not vi
filetype off                   " Required for Vundle

" OS-specific settings. Keep actual changes to a minimum. Set variables
" instead, and use them later.
if has('win32') || has('win64')
    set guifont=Consolas_for_Powerline_FixedD:h10:cANSI
    set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
    let s:vim_data_dir = '$LOCALAPPDATA/Vim'
endif

if has('unix')
    set guifont=Consolas\ for\ Powerline\ 10
    set wildignore+=*/tmp/*,*.so,*.swp,*.zip
    let s:vim_data_dir="$HOME/VimBackup//,."
endif

if isdirectory(expand(s:vim_data_dir))
    if &directory =~# '^\.,'
        let &directory = expand(s:vim_data_dir) . '/swap//,' . &directory
    endif
    if &backupdir =~# '^\.,'
        let &backupdir = expand(s:vim_data_dir) . '/backup//,' . &backupdir
    endif
    if exists('+undodir') && &undodir =~# '^\.\%(,\|$\)'
        let &undodir = expand(s:vim_data_dir) . '/undo//,' . &undodir
    endif
endif

if exists('+undofile')
  set undofile
endif

" Invoke vundle
set rtp+=$HOME/.vim/user-runtime/
set rtp+=$HOME/.vim/bundle/vundle/
call vundle#rc()

" Bundles go here
Bundle 'Lokaltog/vim-easymotion'
Bundle 'Lokaltog/vim-powerline'
Bundle 'PProvost/vim-ps1'
Bundle 'SirVer/ultisnips'
Bundle 'Valloric/MatchTagAlways'
Bundle 'Valloric/YouCompleteMe'
Bundle 'dogrover/vim-pentadactyl'
Bundle 'dogrover/vim-syntax-checklist-wrangler'
Bundle 'gmarik/vundle'
Bundle 'jmcantrell/vim-virtualenv'
Bundle 'lambdalisue/nose.vim'
Bundle 'plasticboy/vim-markdown'
Bundle 'reinh/vim-makegreen'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-scriptease'
Bundle 'tpope/vim-sensible'
Bundle 'tpope/vim-surround'
Bundle 'vim-scripts/Gundo'
Bundle 'vim-scripts/LargeFile'
Bundle 'vim-scripts/TWiki-Syntax'
Bundle 'vim-scripts/Tabular'
Bundle 'vim-scripts/buftabs'
Bundle 'vim-scripts/iim.vim'
Bundle 'vim-scripts/xml.vim'
Bundle 'w0ng/vim-hybrid'
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-notes'

" The rest of the settings
filetype plugin indent on               " Required after the Vundle stuff

" General editor settings
set cursorline                          " Highlight the row with the cursor
set diffopt=filler,iwhite               " Show all lines, ignore trailing spaces
set expandtab                           " Differ from "sensible.vim" settings
set helplang=En                         " Help is in English
set hidden                              " Keep changed buffers without saving
set list                                " Display some whitespace
set more                                " Prompt after a full screen of data
set nolazyredraw                        " Redraw as often as needed
set number                              " Always show line numbers
set numberwidth=6                       " Always keep six columns for line numbers
set ruler                               " Show rule at the bottom of the screen
set showcmd                             " Display partial commands in progress
set showfulltag                         " Show entire completion, when available
set showmode                            " Display the current editing mode
set synmaxcol=2048                      " Prevent bogdown on long lines
set ttyfast                             " Fast terminal
set undofile                            " Create persistent undo history for each file
set undolevels=1000                     " Lots and lots of undo
set updatecount=100                     " Frequent updates to swapfile
set viminfo='100,h                      " Save marks from past files
set visualbell                          " No beeps, but do warn
set wildmode=list:longest               " More complete keyword completion
set window=80                           " Default size for new windows

" Revolt! Change the leader.
let mapleader = ","

" UI stuff
set guioptions=emr
set selectmode=mouse,key
set nocursorline
:color hybrid

" Add Firefox-style buffer switching
noremap <C-Tab> :bnext<CR>
noremap <C-S-Tab> :bprev<CR>

" Let's fix search/move commands
" First, fix regex to work like everybody else's
nnoremap / /\v
vnoremap / /\v
set ignorecase                          " Default search is not case-sensitive
set smartcase                           " An uppercase makes search case sens.
set incsearch                           " Hilite matches
set hlsearch                            " Hilite the search term
set gdefault                            " Apply s// changes to the whole line
" Jump to bracket pairs more quickly
nnoremap <tab> %
vnoremap <tab> %
" Quicker find and replace
nnoremap <C-S-S> :%s//
inoremap <C-S-S> :%s//

" Long lines, wrapping, and general indenting
set formatoptions=qrn1                  " See 'fo-table' help
set linebreak                           " Better control over linebreaks
set shiftwidth=4                        " Indent 4 columns
set smartindent                         " C-style indenting is the norm
set softtabstop=4                       " Soft-tabs are 4 columns
set tabstop=4                           " Tabs are 4 columns
set textwidth=79                        " Yeah, 80 columns is still a good idea
set whichwrap=b,s,<,>,[,]               " Which characters move across line breaks
set wrap                                " Display full text of line, wrapping if needed

" Always strip whitespace when saving
autocmd BufWritePre * :%s/\s\+$//e

" Bite the bullet! Disable Windows-style movement keys.
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
" Move by screen line, not by file line
nnoremap j gj
nnoremap k gk

" Quick macro to insert current date\time stamp
:nnoremap <S-F5> "=strftime("%d-%b-%Y %H:%M:%S")<CR>P
:inoremap <S-F5> <C-R>=strftime("%d-%b-%Y %H:%M:%S")<CR>

" Settings for :TOhtml (built-in command)
let html_number_lines=1                 " Include line numbers
let html_use_css=1                      " Generate shorter HTML 4 file
let use_xhtml=1                         " Generate valid XHTML

" Keymappings which swap different text entities. See:
" http://vim.wikia.com/wiki/Swapping_characters,_words_and_lines
" Swaps the current character with the next. Cursor stays.
:nnoremap <silent> gc xph
" Swaps the current word with the next, honoring puctuation, and keeping
" cursor in the same place. Works across newlines
:nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
" Swap the current word with the previous, keeping cursor on current word
" (like 'pushing' the word to the left.)
:nnoremap <silent> gl "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
" Swap the current word with the next, keeping cursor on current word (like
" 'pushing' the word to the right.)
:nnoremap <silent> gr "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l>
" Swap the current paragraph with the next
:nnoremap g{ {dap}p{

" Buftabs settings
" https://github.com/vim-scripts/buftabs
let g:buftabs_only_basename=1                       " Don't show the directory name
"let g:buftabs_in_statusline=0                       " DON'T Put buffer list in the status line
let g:buftabs_active_highlight_group="Folded"       " Highlight the active buffer
let g:buftabs_inactive_highlight_group="NonText"    " Lowlight the inactive buffer list

" Spelling
nmap <silent> <leader>ss :setlocal spell!<CR>
nmap <silent> <leader>se :setlocal spelllang=en<CR>

" Working with .vimrc and other common rcs
nmap <silent> <leader>ev :edit $MYVIMRC<CR>
nmap <silent> <leader>sv :source $MYVIMRC<CR>
nmap <silent> <leader>ep :edit $HOME/.pentadactylrc<CR>
nmap <silent> <leader>em :edit $HOME/pentadactyl/plugins/mcafee.penta<CR>
nmap <silent> <leader>eP :edit $HOME/Documents/WindowsPowerShell/Microsoft.PowerShell_profile.ps1<CR>
nmap <leader>es :execute ":edit $VIMHOME/snippets/" . &filetype . ".snippets"<CR>

" Handle known filetypes
au BufNewFile,BufRead *.jmx set filetype=xml

" Bundle settings
" ---------------

" Gundo
nmap <silent> <C-F5> :GundoToggle<CR>

" Powerline
let g:Powerline_symbols="fancy"

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippets"]
